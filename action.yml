# action.yml
name: 'ocicl'
description: 'Publish an ocicl artifact'
inputs:
  gpg_signing_key:
    required: true
  gpg_public_key:
    required: true
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v3
    - name: Run
      shell: bash
      run: podman run --rm --tty --interactive  --volume $(pwd):/github/workspace:z ghcr.io/ocicl/ocicl-sandbox:latest
    - run: |
        set -x
        retry_command0() {
          local -r cmd="$@"
          local -i attempt=0
          local -i max_attempts=5
          local -i sleep_time=1  # Initial backoff delay in seconds

          until $cmd; do
              attempt+=1
              if (( attempt > max_attempts )); then
                  echo "The command has failed after $max_attempts attempts."
                  return 1
              fi
              echo "The command has failed. Retrying in $sleep_time seconds..."
              sleep $sleep_time
              sleep_time=$((sleep_time * 2))  # Double the backoff delay each time
          done
        }
        NAME=$(cat NAME)
        SYSTEMS=$(cat SYSTEMS)
        VERSION=$(cat VERSION)
        cd src
        echo ${{ github.token }} | oras login ghcr.io -u ${{ github.actor }} --password-stdin
        pwd
        ls -l
        for S in ${SYSTEMS}; do
          S=$(echo ${S} | sed 's/+$/_plus/g' | sed 's/+/_plus_/g')
          retry_command0 oras push ghcr.io/ocicl/${S}:${VERSION} ${NAME}-${VERSION}.tar.gz:application/vnd.uknown/layer.v1+gzip
          retry_command0 oras tag ghcr.io/ocicl/${S}:${VERSION} latest
        done
        echo ${VERSION} > ~/_00_OCICL_VERSION
      shell: bash
    - name: Import GPG key
      run: |
        echo $GPG_SIGNING_KEY | base64 -d | gpg --batch --import
        echo $GPG_PUBLIC_KEY | base64 -d > pub.key
      shell: bash
      env:
        GPG_SIGNING_KEY: '${{ inputs.gpg_signing_key }}'
        GPG_PUBLIC_KEY: '${{ inputs.gpg_public_key }}'
    - name: Sign the published artifact
      if: ${{ github.event_name != 'pull_request' }}
      run: |
        retry_command() {
          local -r cmd="$@"
          local -i attempt=0
          local -i max_attempts=5
          local -i sleep_time=1  # Initial backoff delay in seconds

          until $cmd; do
              attempt+=1
              if (( attempt > max_attempts )); then
                  echo "The command has failed after $max_attempts attempts."
                  return 1
              fi
              echo "The command has failed. Retrying in $sleep_time seconds..."
              sleep $sleep_time
              sleep_time=$((sleep_time * 2))  # Double the backoff delay each time
          done
        }
        set -x
        NAME=$(cat NAME)
        FILE=$(cd src; ls ${NAME}-*.tar.gz)
        gpg -k
        gpg --armor -u "ocicl-tarball-signer" --output ${FILE}.sig --detach-sig src/${NAME}-*.tar.gz
        for S in $(cat SYSTEMS); do
          S=$(echo ${S} | sed 's/+$/_plus/g' | sed 's/+/_plus_/g')
          retry_command oras push ghcr.io/ocicl/${S}.sig:latest ${FILE}.sig:application/vnd.uknown/layer.v1+gzip
          retry_command oras tag ghcr.io/ocicl/${S}.sig:latest $(cat ~/_00_OCICL_VERSION)
        done
        TARBALL=$(ls src/${NAME}-*.tar.gz)
        retry_command podman run --rm --tty --interactive --volume $(pwd):/github/workspace:z ghcr.io/ocicl/ocicl-sandbox:latest rekor-cli upload --signature /github/workspace/${FILE}.sig --public-key /github/workspace/pub.key --artifact /github/workspace/${TARBALL}
      shell: bash
